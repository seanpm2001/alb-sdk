{
    "irule": [
        "ltm rule /Common/https_301_redirect.irule {\n            when HTTP_REQUEST {\n                            HTTP::respond 301 Location \"https://[HTTP::host][HTTP::uri]\"\n                                        }\n                                                }\n",
        "ltm rule /Common/https_redirect_host_only.irule {\n            when HTTP_REQUEST {\n               set host [HTTP::host]\n               HTTP::respond 302 Location \"https://$host/\"\n            }\n        }"
        ],
    "irule_fail": [
        "ltm rule /Common/ah.manage.mcafee.com.access.irule {\n#This irule blocks requests to certain services for ah*.manage.mcafee.com for cloudEPO\npriority 150\nwhen HTTP_REQUEST {\n  switch -glob [string tolower [HTTP::uri]] {\n    \"/spipe*\"\n            -\n    \"/software*\"\n            -\n    \"/config*\"\n            -\n    \"/redir*\"\n            -\n    \"/policy*\"\n            {pool [LB::server pool]}\n    default {\n            log local0. \"ah.manage.mcafee.com.access.irule dropped connection from [IP::client_addr] to [HTTP::uri]\"\n            discard }\n    }\n}}",
        "ltm rule /Common/mms_no-persist.irule {\n    #This irule removes persistence settings for specific urls\nwhen HTTP_REQUEST {\n  switch -glob [string tolower [HTTP::uri]] {\n    \"/internalservices/registration.svc\" {\n            persist none\n    }\n}\n}\n}\n",
        "ltm rule /Common/embargo-cc-reject.irule {\n    when CLIENT_ACCEPTED {\n    # Get the country client IP\n    switch [whereis [IP::client_addr] country] {\n        \"CU\" -\n        \"IR\" -\n        \"KP\" -\n        \"SD\" -\n        \"SY\" {\n            # Reset the TCP connection\n            reject\n        }\n    }\n}\n}",
        "ltm rule /Common/block.admin.folder.rule {\n    #This i-rule is to block anything with /admin for VIP {Requestor : Ashok Kumar }\nwhen HTTP_REQUEST {\n    switch -glob [string tolower [HTTP::uri]] {\n        \"/admin*\" { reject }\n        default { return }\n    }\n}}",
        "ltm rule /Common/ah.manage.mcafee.com.access.irule {\n#This irule blocks requests to certain services for ah*.manage.mcafee.com for cloudEPO\npriority 150\nwhen HTTP_REQUEST {\n  switch -glob [string tolower [HTTP::uri]] {\n    \"/spipe*\"\n            -\n    \"/software*\"\n            -\n    \"/config*\"\n            -\n    \"/redir*\"\n            -\n    \"/policy*\"\n            {pool pool1}\n    default {\n            log local0. \"ah.manage.mcafee.com.access.irule dropped connection from [IP::client_addr] to [HTTP::uri]\"\n            discard }\n    }\n}}",
        "ltm rule /Common/artifactory-lvs.redirection.irule {\n    when HTTP_REQUEST {\nswitch -glob [HTTP::path] {\n\"/\"  {\n     HTTP::redirect \"https://artifactory-lvs.corpzone.internalzone.com/artifactory/webapp/\"\n         }\n\"/artifactory\" {\n     HTTP::redirect \"https://artifactory-lvs.corpzone.internalzone.com/artifactory/webapp/\"\n         }\n\"/artifactory/\" {\n     HTTP::redirect \"https://artifactory-lvs.corpzone.internalzone.com/artifactory/webapp/\"\n         }\n\"/artifactory/webapp\" {\n         HTTP::redirect \"https://artifactory-lvs.corpzone.internalzone.com/artifactory/webapp/\"\n         }\n\"/v1\" {\n     HTTP::redirect \"https://artifactory-lvs.corpzone.internalzone.com/artifactory/api/docker/docker-local/v1\"\n         }\n\"/v2\" {\n     HTTP::redirect \"https://artifactory-lvs.corpzone.internalzone.com/artifactory/api/docker/docker-local/v2\"\n         }\n   }}}",
        "ltm rule /Common/service.mcafee.com.access.irule {\n    when HTTP_REQUEST {\n     switch -glob [string tolower [HTTP::uri]] {\n            \"/webcenter/system/*\" -\n            \"/webcenter/portal/system/*\" -\n            \"/webcenter/portal/cp/system/*\" -\n            \"/cs/login/login.htm\" -\n            \"/cs/idcplg*\" {\n                if { not (( [class match [IP::client_addr] equals mcafee_ips]) || ([class match [IP::client_addr] equals intel_ips])) } {\n                log local0. \"block [IP::client_addr] to [HTTP::host][HTTP::uri]\"\n                discard\n                }\n            }\n     }\n}}"

    ],
    "functioncall": [
        "[HTTP::host]",
        "[string tolower [HTTP::uri]]",
        "[whereis [IP::client_addr] country]",
        "[LB::server pool]"
    ],
    "switch": [
        "    switch -glob [string tolower [HTTP::host]] {\n        lyncweb.corp.avinetworks.com* { pool avinetworks.lync_reverse_proxy_front_end_4443_pool }\n\n        meet.avinetworks.com*   { pool avinetworks.lync_reverse_proxy_front_end_4443_pool  }\n        dialin.avinetworks.com* { pool avinetworks.lync_reverse_proxy_front_end_4443_pool  }\n        lyncdiscover.avinetworks.com* { pool avinetworks.lync_reverse_proxy_front_end_4443_pool }\n    }",
        "  switch -glob [string tolower [HTTP::uri]] {\n      \"/spipe*\" -\n      \"/software*\" -\n      \"/config*\" -\n      \"/redir*\" -\n      \"/policy*\"\n\n      {pool pool1}\n\n                                                                                                                  }"
        ],
    "switch_fail": [
        "  switch -glob [string tolower [HTTP::uri]] {\n    \"/spipe*\"\n            -\n    \"/software*\"\n            -\n    \"/config*\"\n            -\n    \"/redir*\"\n            -\n    \"/policy*\"\n            {pool [LB::server pool]}\n    default {\n            log local0. \"ah.manage.mcafee.com.access.irule dropped connection from [IP::client_addr] to [HTTP::uri]\"\n            discard }\n    }",
        "  switch [whereis [IP::client_addr] country] {\n        \"CU\" -\n        \"IR\" -\n        \"KP\" -\n        \"SD\" -\n        \"SY\" {\n            # Reset the TCP connection\n            reject\n        }\n    }",
        "  switch -glob [string tolower [HTTP::uri]] {\n        \"/admin*\" { reject }\n        default { return }\n    }",
        "  switch -glob [string tolower [HTTP::uri]] {\n    \"/spipe*\"\n            -\n    \"/software*\"\n            -\n    \"/config*\"\n            -\n    \"/redir*\"\n            -\n    \"/policy*\"\n            {pool pool1}\n    default {\n            log local0. \"ah.manage.mcafee.com.access.irule dropped connection from [IP::client_addr] to [HTTP::uri]\"\n            discard }\n    }"

    ],
    "switchcase": [
        "\n    \"/policy*\"\n            {pool pool1}\n",
        "default {\n            log local0. \"ah.manage.mcafee.com.access.irule dropped connection from [IP::client_addr] to [HTTP::uri]\"\n            discard }\n    }"
    ],
    "switchcase_fail": [
        "\n    \"/policy*\"\n            {pool [LB::server pool]}\n",
        "            \"/cs/idcplg*\" {\n                if { not (( [class match [IP::client_addr] equals mcafee_ips]) || ([class match [IP::client_addr] equals intel_ips])) } {\n                log local0. \"block [IP::client_addr] to [HTTP::host][HTTP::uri]\"\n                discard\n                }\n            }"

],
    "statement": [
        "log local0. \"ah.manage.mcafee.com.access.irule dropped connection from [IP::client_addr] to [HTTP::uri]\""
    ],
    "statement_fail": [
        "    switch [whereis [IP::client_addr] country] {\n        \"CU\" -\n        \"IR\" -\n        \"KP\" -\n        \"SD\" -\n        \"SY\" {\n            # Reset the TCP connection\n            reject\n        }\n    }"
    ],
    "commentstatement": [
        "    # Get the country client IP"
    ],
    "when": [
        "when HTTP_REQUEST {\n  if { ([HTTP::uri] contains \"/ws-polling/\") }{\n      pool payment_pool\n    }\n  }"
    ],
    "when_fail": [
        "when CLIENT_ACCEPTED {\n    # Get the country client IP\n    switch [whereis [IP::client_addr] country] {\n        \"CU\" -\n        \"IR\" -\n        \"KP\" -\n        \"SD\" -\n        \"SY\" {\n            # Reset the TCP connection\n            reject\n        }\n    }\n}\n"
    ],
    "ifblock": [
        "  if { [HTTP::path] contains \"-12345\" } then {\n\n      # remove the HASHvalue from the path\n      HTTP::uri [string map {\"/public/\" \"/private/\"}[HTTP::uri]]\n\n      # send changed HTTP:URI/path to following node 10.10.10.10\n      pool pool1\n\n      }\n  }\n}",
        "  if { ([HTTP::uri] contains \"/ws-polling/\") } then {\n      pool payment_pool\n    }",
        "  if { ([HTTP::path] contains \"-12345\") } then  {\n      pool payment_pool\n   }"
    ],
    "ifblock_fail": [
        "  if { not (( [class match [IP::client_addr] equals mcafee_ips]) || ([class match [IP::client_addr] equals intel_ips])) } {\n                log local0. \"block [IP::client_addr] to [HTTP::host][HTTP::uri]\"\n                discard\n                }"
    ],
    "ifcase": [

        "{ [HTTP::path] contains \"-12345\" } then ",
        "{ ([HTTP::path] contains \"-12345\") }"
    ],
    "ifcase_fail": [
        "{ not (([HTTP::uri] contains \"/ws-polling/\")) )",
        "{ not (([HTTP::uri] contains \"/ws-polling/\"))  then ",
        " not (([HTTP::uri] contains \"/ws-polling/\"))",
        " not (([HTTP::uri] contains \"/ws-polling/\")) }",
        "{ not (([HTTP::uri] contains \"/ws-polling/\") }",
        "{ not (([HTTP::uri]) contains \"/ws-polling/\")  then ",
        "{ not (( [class match [IP::client_addr] equals mcafee_ips] || ([class match [IP::client_addr] equals intel_ips])) }",
        "{  (([HTTP::uri] contains \"/ws-polling/\")) )",
        "{  (([HTTP::uri] contains \"/ws-polling/\"))  then ",
        "  (([HTTP::uri] contains \"/ws-polling/\"))",
        "  (([HTTP::uri] contains \"/ws-polling/\")) }",
        "{  ([HTTP::uri] contains \"/ws-polling/\") )",
        "{  ([HTTP::uri] contains \"/ws-polling/\")  then ",
        "  [HTTP::uri] contains \"/ws-polling/\")",
        "  ([HTTP::uri] contains \"/ws-polling/\") }",
        "{  (([HTTP::uri] contains \"/ws-polling/\") }",
        "{  (([HTTP::uri]) contains \"/ws-polling/\")  then ",
        "{  (( [class match [IP::client_addr] equals mcafee_ips] || ([class match [IP::client_addr] equals intel_ips])) }"
    ],
    "stringmap": [
        "HTTP::path [string map {\"/share/-12345/\" \"/share/\"} [HTTP::path]]",
        "HTTP::uri [string map {\"/public/\" \"/private/\"}[HTTP::uri]]"

    ],
    "stringmap_fail": [
        "HTTP::path [string map {\"/share/-12345/\" \"/share/\"} [HTTP::uri]]",
        "HTTP::uri [string map {\"/public/\" \"/private/\"}[HTTP::path]]"

    ],
    "poolswitch": [
        "      pool payment_pool",
        "      pool payment_pool member 10.10.10.20 80"
    ],
    "poolswitch_fail": [
        "      pool"
    ],
    "nodeswitch": [
        "      node 10.10.10.10 443"
    ],
    "nodeswitch_fail": [
        "      node 10.10.10.10"
    ],
    "basecondition": [
        " [HTTP::uri] contains \"/ws-polling/\" ",
        "[HTTP::path] contains \"-12345\" ",
        "[class match [IP::client_addr] equals mcafee_ips]",
        "$my_uri starts_with \"/remote/\""
    ],
    "condition": [
        "not (([HTTP::uri] contains \"/ws-polling/\"))",
        "not (( [class match [IP::client_addr] equals mcafee_ips]) || ([class match [IP::client_addr] equals intel_ips]))  ",
        "($my_uri starts_with \"/remote/\") or ($my_uri eq \"/core/config\")"
    ],
    "header_statement": [
        "HTTP::header remove Content-Length",
        "HTTP::header insert \"X-SOURCE\" \"Akamai\""
    ]
}
